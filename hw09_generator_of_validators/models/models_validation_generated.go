// Code generated by cool go-validate tool; DO NOT EDIT.
package models

import (
	"errors"
	"regexp"
	"unicode/utf8"
)

type ValidationError struct {
	Field string
	Err   error
}

func (_this App) Validate() ([]ValidationError, error) {
	var val []ValidationError

	if utf8.RuneCountInString(_this.Version) != 5 {
		val = append(val, ValidationError{Field: "Version", Err: errors.New("value must be len 5")})
	}

	return val, nil
}
func (_this Response) Validate() ([]ValidationError, error) {
	var val []ValidationError

	{
		var isIn bool
		for _, v := range []int{200, 404, 500} {
			if v == _this.Code {
				isIn = true
			}
		}
		if !isIn {
			val = append(val, ValidationError{Field: "Code", Err: errors.New("value must be in 200,404,500")})
		}
	}

	return val, nil
}
func (_this User) Validate() ([]ValidationError, error) {
	var val []ValidationError

	if utf8.RuneCountInString(_this.ID) != 36 {
		val = append(val, ValidationError{Field: "ID", Err: errors.New("value must be len 36")})
	}

	if 18 > _this.Age {
		val = append(val, ValidationError{Field: "Age", Err: errors.New("value must be min 18")})
	}

	if 50 < _this.Age {
		val = append(val, ValidationError{Field: "Age", Err: errors.New("value must be max 50")})
	}

	re := regexp.MustCompile("^\\w+@\\w+\\.\\w+$")
	if !re.MatchString(_this.Email) {
		val = append(val, ValidationError{Field: "Email", Err: errors.New("value must be regexp ^\\w+@\\w+\\.\\w+$")})
	}

	{
		var isIn bool
		for _, v := range []UserRole{"admin", "stuff"} {
			if v == _this.Role {
				isIn = true
			}
		}
		if !isIn {
			val = append(val, ValidationError{Field: "Role", Err: errors.New("value must be in admin,stuff")})
		}
	}

	for _, v := range _this.Phones {

		if utf8.RuneCountInString(v) != 11 {
			val = append(val, ValidationError{Field: "Phones", Err: errors.New("value must be len 11")})
		}

	}
	return val, nil
}
